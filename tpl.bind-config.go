package main

import (
	"log"
	"os"
	"text/template"
)

// bindConfigTemplate is the template for the bind config bootstrap file
const bindConfigTemplate = `###############################################################################
# Generated by go-zones
###############################################################################

###############################################################################
# ACLs
###############################################################################
{{- with .DNS.ACLs }}{{ range $i, $acl := . }}
# ACL #{{ $i }} - {{ $acl.Name }}
acl "{{ $acl.Name }}" {
{{- with $acl.Networks }}{{ range . }}
	{{ . }};
{{- end }}{{ end }}
};
{{ end }}{{ end }}

###############################################################################
# Views
###############################################################################
{{ $path := .BasePath }}
{{- with .DNS.Views }}{{ range $i, $view := . }}
# View #{{ $i }} - {{ $view.Name }}
view "{{ $view.Name }}" {
	match-clients { {{ with $view.ACLs }}{{ range . }}{{ . }}; {{ end }}{{ end }}};

{{- if $view.Recursion }}
	recursion yes;
{{- end }}

{{- with $view.Forwarders }}
	forwarders {
{{- range $i, $forwarder := . }}
    {{ $forwarder }};
{{- end }}
	};
{{- end }}

{{- with $view.ForwardedZones }}{{ range $i, $forwardedZone := . }}

	# Forwarded Zone #{{ $i }} - {{ $forwardedZone.Zone }}
  zone "{{ $forwardedZone.Zone }}" {
    type forward;
		forward only;
		forwarders {
{{- range $f, $forwarder := $forwardedZone.Forwarders }}
			{{ $forwarder }};
{{- end }}
		};
	};
{{- end }}{{ end }}

{{- with $view.IncludedZones }}{{ range $i, $zone := . }}

	# Authoritative Zone #{{ $i }} - {{ $zone }}
	include "{{ $path }}/config/fwd.{{ $zone }}.zone.conf";
{{- end }}{{ end }}

{{- with $.RevViewPair }}{{ range $i, $revView := . }}
{{- if eq $i $view.Name }}{{- range $j, $revZone := $revView }}

	# Reverse View #{{ $j }} - {{ $revZone }}
	include "{{ $path }}/config/rev.{{ $revZone }}.zone.conf";
{{- end }}{{ end }}{{ end }}{{ end }}

};
{{ end }}{{ end }}
`

// GenerateBindConfigFile generates the bind config bootstrap file
func GenerateBindConfig(server *DNS, basePath string, revViewPair map[string][]string) (bool, error) {

	//log.Printf("debug: %v", server)
	templatePair := TemplatePair{DNS: *server, BasePath: basePath, RevViewPair: revViewPair}

	// Create template object
	t, err := template.New("config").Parse(bindConfigTemplate)
	check(err)

	// Create go-zones bootstrap config file
	f, err := os.Create(basePath + "/config/go-zones-bootstrap.conf")
	check(err)
	log.Println("Creating BIND bootstrap include file: " + basePath + "/config/go-zones-bootstrap.conf")

	// Execute zone file templating
	err = t.Execute(f, templatePair)
	check(err)

	// Close and write file
	f.Close()

	return true, nil
}

//##############################################################################

// bindZonePair is a small struct that holds the zone name and path for
//  a bind zone file needed by the bindZoneIncludeFileTemplate
type bindZonePair struct {
	Zone string
	Path string
}

// bindZoneIncludeFileTemplate is a template partial that holds the zone
//  definition for a bind zone file
const bindZoneIncludeFileTemplate = `zone "{{.Zone}}" {
	type master;
	file "{{.Path}}";
}
`

// GenerateBindZoneIncludeFiles generates the bind zone files that are
//  included in the views in the bootstrap config file
func GenerateBindZoneConfigFile(server *DNS, basePath string) (bool, error) {

	//log.Printf("debug: %v", zone)
	for _, zone := range server.Zones {
		// Create template object
		t, err := template.New("config").Parse(bindZoneIncludeFileTemplate)
		check(err)

		// Create a zone include config file
		f, err := os.Create(basePath + "/config/fwd." + zone.Name + ".zone.conf")
		check(err)

		// Execute zone file templating
		templatePair := bindZonePair{Zone: zone.Zone, Path: basePath + "/zones/fwd." + zone.Name + ".zone"}

		err = t.Execute(f, templatePair)
		check(err)

		// Close and write file
		f.Close()
	}

	return true, nil
}

// GenerateBindZoneReverseConfigFile generates the bind zone files that are
//  included in the views in the bootstrap config file
func GenerateBindZoneReverseConfigFile(server map[string][]PTRRecord, basePath string) (bool, error) {

	//log.Printf("debug: %v", zone)
	for k := range server {
		// Create template object
		t, err := template.New("config").Parse(bindZoneIncludeFileTemplate)
		check(err)

		// Create a zone include config file
		f, err := os.Create(basePath + "/config/rev." + k + ".zone.conf")
		check(err)

		// Execute zone file templating
		templatePair := bindZonePair{Zone: k, Path: basePath + "/zones/rev." + k + ".zone"}

		err = t.Execute(f, templatePair)
		check(err)

		// Close and write file
		f.Close()
	}

	return true, nil
}
